
import json
import os
import shutil
from base64 import b64encode
from datetime import datetime
from functools import wraps

import discord
from decouple import config
from discord import message
from discord.enums import ChannelType
from discord.ext import commands, tasks
from discord_setup import get_or_create_channel, get_or_create_role
from invite_tracker import InviteTracker
from loguru import logger

DISCORD_GUILD_ID = config("DISCORD_GUILD_ID")
DISCORD_LOG_CHANNEL_ID = config("DISCORD_LOG_CHANNEL_ID")

def only_log_exceptions(function):
    @wraps(function)
    async def wrapper(*args, **kwargs):
        try:
            return await function(*args, **kwargs)
        except:
            logger.exception(f"Error while calling {function!r}")
    return wrapper

async def logchannel(bot, message):
    channel = await bot.fetch_channel(DISCORD_LOG_CHANNEL_ID)
    await channel.send(message)

MSG="""Tutorial {channel}"""





TUTORIAIS = [
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Desenhando com Python: programa√ß√£o criativa ao alcance de todas as pessoas", "data_hora":"2021-10-17 10:00:00", "vagas": "25", "ministrantes": ["Alexandre Villares"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "An√°lise de Datasets Cient√≠ficos usando Python", "data_hora":"2021-10-16 10:00:00", "vagas": "100", "ministrantes": ["Bruno dos Santos Almeida"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "1-Djavue - criando uma aplica√ß√£o web do zero com Django e Vue.js", "data_hora":"2021-10-16 10:00:00", "vagas": "80", "ministrantes": ["Buser (facilitadora: Renzo Nuccitelli)"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "2-Djavue - criando uma aplica√ß√£o web do zero com Django e Vue.js", "data_hora":"2021-10-16 15:00:00", "vagas": "80", "ministrantes": ["Buser (facilitadora: Renzo Nuccitelli)"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Desenvolvimento orientado a testes com Django", "data_hora":"2021-10-17 15:00:00", "vagas": "20", "ministrantes": ["Carta (facilitador: Gabriel Saldanha)"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Como o dinheiro viaja internacionalmente?", "data_hora":"2021-10-16 10:00:00", "vagas": "80", "ministrantes": ["Ebury (facilitador: Gustavo Di Domenico)"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Acelerando a explora√ß√£o de dados multidimensionais com Xarray", "data_hora":"2021-10-17 15:00:00", "vagas": "60", "ministrantes": ["Felipe Schuc:00:00"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Python para microcontroladores com MicroPython", "data_hora":"2021-10-17 10:00:00", "vagas": "10", "ministrantes": ["Gabriel Arag√£o"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Python Geoespacial: automatizando processos de GIS e Sensoriamento Remoto com pacotes abertos em python", "data_hora":"2021-10-17 15:00:00", "vagas": "15", "ministrantes": ["Guilherme Iablonovski"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Viajando por uma API protegida: Implementando uma API com Flask", "data_hora":"2021-10-16 10:00:00", "vagas": "30", "ministrantes": ["Jessica Temporal"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Expectativas nem sempre machucam - Criando expectativas para os seus dados com Great Expectations.", "data_hora":"2021-10-16 15:00:00", "vagas": "20", "ministrantes": ["Joamila Brito"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Analisando 250GB em segundos usando Python e a Base dos Dados", "data_hora":"2021-10-16 10:00:00", "vagas": "10", "ministrantes": ["Jo√£o Carabetta"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Criando um jogo de plataforma com Pygame do zero", "data_hora":"2021-10-16 10:00:00", "vagas": "12", "ministrantes": ["Jo√£o JS Bueno"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Python para Dashboards", "data_hora":"2021-10-17 15:00:00", "vagas": "30", "ministrantes": ["Jose Edivaldo da Silva Junior"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Airflow na Pratica", "data_hora":"2021-10-16 10:00:00", "vagas": "40", "ministrantes": ["JusBrasil (facilitador: Tarsis)"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Anatomia de um interpretador Lisp em Python", "data_hora": "2011-10-16 15:00:00", "vagas": "30", "ministrantes": ["Luciano Ramalho"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Construindo API's robustas utilizando Python", "data_hora":"2021-10-16 15:00:00", "vagas": "30", "ministrantes": ["Luizalabs (facilitador: Cassio Botaro)"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "As luas de Jupyter: widgets e outras ferramentas que o orbitam", "data_hora":"2021-10-17 10:00:00", "vagas": "20", "ministrantes": ["Mariana Meireles", "Marcos Pantuza", "Laysa Ucho"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Qual produto √© o melhor para mim? Comparando produtos usando a API de MELI", "data_hora":"2021-10-17 10:00:00", "vagas": "15", "ministrantes": ["Mercado Livre (facilitador: Giovanni Almeida)"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Desvendando o c√≥digo gen√©tico com Biopython", "data_hora":"2021-10-17 10:00:00", "vagas": "30", "ministrantes": ["P√¢mella Ara√∫jo Balca√ßar"]},
    {"channel":None,"voice":None,"userinscritos":[],"inscritos":0,"nome": "Manipulando Imagens da webCam com python", "data_hora":"2021-10-17 15:00:00", "vagas": "40", "ministrantes": ["Ramon Domingos Duarte Oliveira"]},
]

class Tutorial(commands.Cog):
    #SPRINTS_FILE_PATH = config("SPRINTS_FILE_PATH")
    AUTH_CHANNEL_ID = config("DISCORD_AUTH_CHANNEL_ID", cast=int)
    AUTH_START_EMOJI = "üëç"
    ATTENDEES_ROLE_NAME = "Participantes"

    def __init__(self, bot):

        #fileObject = open(self.SPRINTS_FILE_PATH, "r")
        #jsonContent = fileObject.read()
        self.bot = bot
        self._guild = None
        self.channel = None
        self.message = None
        self.check_messages = False
        self.voice = None
        # self.sprints_json = json.loads(jsonContent)
        self._allowtouser= False
        self._tutoriais = []
        # logger.info(self.sprints_json)
        # logger.info(type(self.sprints_json))

    async def save_list(self,tutorial):
        os.makedirs("./json",exist_ok=True)
        with open(f"./json/{tutorial['file_name']}", 'w') as f:
            json.dump(tutorial, f)
        return tutorial
        

    async def load_list(self,tutorial):
        if os.path.isfile(f"./json/{tutorial['file_name']}"):
            with open(f"./json/{tutorial['file_name']}", 'rb') as f:
                return json.load(f)
        else:
            tutorial['userinscritos']=[]
            tutorial['inscritos']=0
            return await self.save_list(tutorial)

    async def remove_files(self):
        shutil.rmtree("./json/")

    async def get_guild(self):
        if not self._guild:
            self._guild = await self.bot.fetch_guild(config("DISCORD_GUILD_ID"))
        return self._guild

    @commands.command(name="reset",brief="warnig on use that!!")
    async def reset(self, ctx):
        logger.info("Resetando Tutoriais")
        self._allowtouser=False
        await self.remove_files()
        await self.on_ready(True)
        await logchannel(self.bot,"Resetanto Tutoriais")
    
    @commands.command(name="open",brief="warnig on use that!!")
    async def open(self, ctx):
        self._allowtouser=True
        for tutorial in self._tutoriais:
            await self.lista(tutorial)
        await self.show_tutoriais()
        logger.info("Inscri√ß√µes abertas")
        await logchannel(self.bot,"Inscri√ß√µes abertas")


    @commands.command(name="create-sprints")
    async def create_sprints(self, ctx):
        self._guild = await self.bot.fetch_guild(config("DISCORD_GUILD_ID"))

        overwrites = {
        self._guild.default_role: discord.PermissionOverwrite(read_messages=False)}
        organizacao_cat = await get_or_create_channel(
            "SPRINTS",
            self._guild,
            type=discord.ChannelType.category,
            overwrites=overwrites,
            position=0,
        )
        
        x= [{'nome': 'Ana Paula Gomes', 'titulo': 'An√°lise de dados para cidades', 'repo': 'https://github.com/DadosAbertosDeFeira/', 'publico': 'Intermedi√°rio (alguma experi√™ncia pr√©via com um framework, biblioteca ou t√©cnica espec√≠fica)', 'conhecimento': 'An√°lise de dados (iniciante), SQL (b√°sico), pandas (iniciante)', 'descri√ß√£o': 'Vamos utilizar dados abertos para criar an√°lises que sirvam para entender cidades de todo o Brasil.', 'comunidadde': 'O projeto tem o objetivo de desenvolver tecnologias c√≠vicas que sirvam para qualquer cidade de todo o Brasil. A partir da participa√ß√£o nessa sprint, o participante poder√° explorar dados da sua cidade e entend√™-la melhor. Com sorte, se envolver mais com ela atrav√©s da programa√ß√£o. :)', 'horarios': 'S√°bado - 10h √†s 13h, Domingo - 10h √†s 13h'}, {'nome': 'Bruno Messias', 'titulo': 'Helios Network Visualization and Streaming', 'repo': 'https://github.com/fury-gl/helios', 'publico': 'Iniciante (conhecimentos b√°sicos em Python, Orienta√ß√£o a Objetos, Estruturas de Dados, etc.)', 'conhecimento': 'Conhecimento b√°sico sobre grafos e dataviz, conhecimento b√°sico de ingl√™s', 'descri√ß√£o': 'Esse projeto foi desenvolvido no meu per√≠odo do google summer of code 2021. Helios √© uma ferramente que permite an√°lise de grafos (tais como oriundos de redes sociais) e inspe√ß√£o visual. Al√©m disso o Helios permite  o compartilhamento da visualiza√ß√£o utilizando o protocolo WebRTC.', 'comunidadde': 'O helios sana algumas defici√™ncias dos softwares livres para visualiza√ß√£o de grafos. Tais como ser capaz de visualizar grafos com milh√µes de n√≥s e permitir a intera√ß√£o colaborativa.', 'horarios': 'S√°bado - 14h √†s 17h, Domingo - 15h √†s 18h'}, {'nome': 'Giulio Carvalho', 'titulo': 'Querido Di√°rio', 'repo': 'https://queridodiario.ok.org.br/', 'publico': 'Intermedi√°rio (alguma experi√™ncia pr√©via com um framework, biblioteca ou t√©cnica espec√≠fica)', 'conhecimento': 'Eu coloquei p√∫blico intermedi√°rio porque contribui√ß√µes de c√≥digo necessitam conhecimentos em raspagem de dados, frontend ou api, por exemplo. Como o projeto tem v√°rios reposit√≥rios, pessoas que tem conhecimento de frameworks como Scrapy, FastAPI e Angular conseguem contribuir com partes diferentes do projeto (raspadores, API, frontend). Mas tamb√©m pensamos em fazer muitas melhorias de documenta√ß√£o do projeto, ent√£o n√£o seria necess√°rio conhecimento t√©cnico pr√©vio. Se conseguirem passar pras pessoas que qualquer n√≠vel √© bem vindo, seria √≥timo :)', 'descri√ß√£o': 'O Querido Di√°rio √© um projeto para libertar dados de di√°rios oficiais municipais, desde a raspagem dos dados de cada munic√≠pio at√© a disponibiliza√ß√£o do conte√∫do processo em formato aberto numa API e numa plataforma de busca. Assim, o projeto tem v√°rios reposit√≥rios, cada um dedicado a uma etapa do processo. Com o lan√ßamento oficial da plataforma de busca, queremos dar uma organizada na casa para diminuir as barreiras iniciais de contribui√ß√£o e tamb√©m adicionar novas funcionalidades que as pessoas achem legais :) Pensamos inicialmente em melhorar a documenta√ß√£o, melhorar a arquitetura do projeto pra tornar mais f√°cil de inserir novas funcionalidades, melhorar a interface de uso das usu√°rias e tamb√©m construir novos raspadores.', 'comunidadde': 'O projeto tem uma vis√£o clara de liberta√ß√£o de dados onde eles s√£o menos transparentes. Queremos fazer com que informa√ß√µes essenciais de funcionamento de todos os munic√≠pios do Brasil estejam acess√≠veis a qualquer pessoa, t√©cnica ou n√£o, que precisa de uma informa√ß√£o pontual que s√≥ est√° dispon√≠vel no di√°rio ou que deseja realizar um estudo acad√™mico atrav√©s do conte√∫do de anos de di√°rios de v√°rias cidades. Cremos que √© poss√≠vel chegar num ponto onde poderemos utilizar esses dados de forma t√£o simples que ser√° f√°cil cruzar informa√ß√µes com outras fontes p√∫blicas como as da Receita Federal e do SUS por exemplo. √â um projeto de c√≥digo aberto e muito receptivo a novas contribui√ß√µes, feito por pessoas muito envolvidas na comunidade e que valorizam demais essa constru√ß√£o colaborativa.', 'horarios': 'S√°bado - 10h √†s 13h, S√°bado - 14h √†s 17h, Domingo - 10h √†s 13h, Domingo - 15h √†s 18h'}, {'nome': 'Jo√£o JS Bueno', 'titulo': 'terminedia', 'repo': 'https://github.com/jsbueno/terminedia', 'publico': 'Iniciante (conhecimentos b√°sicos em Python, Orienta√ß√£o a Objetos, Estruturas de Dados, etc.)', 'conhecimento': 'Python puro, vontade de criar arte na forma de programas ou gostar de jogos vintage', 'descri√ß√£o': 'O Terminedia √© um projeto aberto, sem fins de mercado: √© um framework que permite a cria√ß√£o de ASCIIArt ou Unicode Art no terminal, de forma interativa. Ele exp√µe APIs de desenhos com caracteres, incluindo podendo usar caracteres de bloco  ASCII numa emula√ß√£o de pixels de alta resolu√ß√£o de texto. Ao longo do desenvolvimento, por n√£o depender de nenhuma lib ou framework externo, ele foi incorporando estruturas de dados e mecanismos que usam a linguagem de forma bastante avan√ßada - por exemplo, decorators que acrescentam par√¢metros de cor efundo em um m√©todo, de forma transparente, ou subclasses de str para facilitar o uso de emojis. \nHoje o projeto est√° bastante completo, contando inclusive com widgets de edi√ß√£o de texto e sele√ß√£o de op√ß√µes, suporte a mouse, que permitem at√© o desenvolvimento de apps completas no terminal. \nUm ponto fraco do projeto √© a documenta√ß√£o e o fato de que os exemplos existentes (s√£o programas stand-alone instalados junto com o projeto), n√£o cobrem todas as possibilidades existindo no c√≥digo.\nA sprint pode focar exatamente nos programas de exemplos: tanto evoluir os exemplos existentes para que se tornem aplicativos com utilidade em si mesmos: h√° o terminedia-plot para plotagem de gr√°ficos no terminal e o terminedia-text para cria√ß√£o de banners de texto usando letras grandes desenhadas com os caracteres de bloco, por exemplo. U  outro √© um joguinho de snake que √© s√≥ uma prova de conceito e pode ser polido at√© ser um jogo completo, com introdu√ß√£o de fases e n√≠veis de dificuldade. E h√° funcionalidades inteiras sem exemplos, como os widgets (controles para entrada de texto e sele√ß√£o), degrad√™s, e os transformers em geral: um mecanismo extremamente poderoso que permite a cria√ß√£o de centenas de efeitos especiais program√°ticos.', 'comunidadde': '√© um projeto com foco cultural e art√≠stico - ent√£o sua contribui√ß√£o vem na raz√£o direta de existirem usu√°rios usando o mesmo como ferramenta para suas cria√ß√µes. Eventualmente pode ser usado no mercado para enfeitar com efeitos especiais passos feitos no terminal como comandos de git, ou sa√≠das de log e compiladores - da mesma forma que o google cria seus doodles. Outras bibliotecas de Python para o terminal tem um foco mais pragm√°tico tentando ser s√©rias: o rich foca muito na cria√ß√£o de logs coloridos, e o prompt toolkit foca em permitir a cria√ß√£o de apps de manipula√ß√£o de dados - a ideia do terminedia √© deixar as possibilidades abertas para cria√ß√£o art√≠stica. Por exemplo, √© poss√≠vel ter uma √°rea de edi√ß√£o de texto na tela do terminal com escrita na vertical, de baixo pra cima e da esquerda pra direita, com colunas de texto em vez de linhas de texto - e colocar isso numa aplica√ß√£o', 'horarios': 'Domingo - 10h √†s 13h, Domingo - 15h √†s 18h'}, {'nome': 'P√¢mella Ara√∫jo Balca√ßar', 'titulo': 'Rasa Boilerplate', 'repo': 'https://github.com/BOSS-BigOpenSourceSibling/bot-da-boss', 'publico': 'Iniciante (conhecimentos b√°sicos em Python, Orienta√ß√£o a Objetos, Estruturas de Dados, etc.)', 'conhecimento': 'Conhecimentos b√°sicos em Python, sintaxe, e tamb√©m as tecnologias como RASA, Docker, preferencialmente ambiente linux.', 'descri√ß√£o': 'O projeto open source Rasa Boilerplate ser√° apresentado junto com conceitos de comunidades open source e o desenvolvimento de chatbots; Entendendo o projeto boilerplate e as tecnologias envolvidas (RASA, Python, Docker);  Conhecer√° arquitetura implementada. E por fim, apresentaremos as issues para contribui√ß√£o.', 'comunidadde': 'Por ser um projeto open source e com parte de sua tecnologia √© desenvolvido em python, poder√° ser promotor da viv√™ncia de contribui√ß√£o em um projeto assim.', 'horarios': 'Domingo - 15h √†s 18h'}, {'nome': 'Rafael Ferreira Fontenelle', 'titulo': 'Tradu√ß√£o da documenta√ß√£o do Python', 'repo': 'https://github.com/python/python-docs-pt-br/wiki/Sprint-pybr2021', 'publico': 'N√£o t√©cnico (isto √©, sua atividade n√£o abordar√° tecnologia diretamente. Ex: Tradu√ß√£o da documenta√ß√£o)', 'conhecimento': 'Ingl√™s', 'descri√ß√£o': 'Esta sprint busca juntar atuais e potenciais membros da equipe de tradu√ß√£o da documenta√ß√£o do Python em uma frente de ataque √†s mensagens n√£o traduzidas.', 'comunidadde': 'Incentivar novos membros a participar da tradu√ß√£o da documenta√ß√£o, bem como aumentar o n√∫mero de mensagens traduzidas.', 'horarios': 'S√°bado - 14h √†s 17h, Domingo - 10h √†s 13h, Domingo - 15h √†s 18h'}]

        self.channel = await get_or_create_channel(f"sprints-info", self._guild, position=0, category=organizacao_cat)
        
        full_msg = []
        for index,sprint in enumerate(self.sprints_json):
            channel = await get_or_create_channel(f"sprint-{index}-chat", self._guild, position=99, category=organizacao_cat)
            voice=  await get_or_create_channel(f"sprint-{index}-voice", self._guild, position=99, category=organizacao_cat,type=discord.ChannelType.voice)
            
            await self.clear(channel.id)
            await channel.send(f"\nCanal da sprint {sprint['titulo']}")
            await channel.send(f"\nDias e Horas {sprint['horarios']}")
            await channel.send(f"\nMinistrante {sprint['nome']}")
            await channel.send(f"\nReposit√≥rio {sprint['repo']}")
            await channel.send(f"\nP√∫blico {sprint['publico']}")
            await channel.send(f"\nConhecimento {sprint['conhecimento']}")
            await channel.send(f"\nDescri√ß√£o {sprint['descri√ß√£o']}")
            await channel.send(f"\nCanal de voz {voice.name}")

            full_msg.append(f"\n<#{channel.id}> Canal da sprint {sprint['titulo']}")
            logger.info(index)


        await self.clear(self.channel.id)
        logger.info(full_msg)
        for msg in full_msg:
            await self.channel.send(msg)

    @commands.command(name="tutorial-users")
    async def tutorial_users(self, ctx):
        logger.info("full_msg")

        self._tutoriais = TUTORIAIS
        out=[]
        for index,tutorial in enumerate(self._tutoriais):
            tutorial["file_name"]=f"tutorial_{index}_file.json"
            tutorial_ =await self.load_list(tutorial)
            tutorial_["data_hora"] =  tutorial["data_hora"]
            tutorial = tutorial_    
            channel = self.bot.get_channel(tutorial["channel"])

            self._guild = await self.bot.fetch_guild(config("DISCORD_GUILD_ID"))
    
            try:
                role = get_or_create_role(channel.name,self._guild ,None)
            except:
                role = None

            canal =  f"<#{channel.id}>" if channel else ''
            data = f"{tutorial['nome']} - {canal} - {datetime.strptime(tutorial['data_hora'],'%Y-%m-%d %H:%M:%S').strftime('%d/%m/%Y %H:%M')}"

            insc=[]

            for inscritos in tutorial.get("userinscritos"):
                inscrito = discord.utils.get(self.bot.get_all_members(), id=inscritos)
                if inscrito:
                    insc.append(f"{inscrito.name} - <@{inscrito.id}>")
                    for role in inscrito.roles:
                        if role.name == channel.name:
                            insc.append(f"{inscrito.name} - <@{inscrito.id}>")
                    #await logchannel(self.bot,f"======   {inscrito.name} - <@{inscrito.id}>")

            insc = list(dict.fromkeys(insc))
            out.append(dict(data=data,inscritos=insc))
        
        logger.info(out)
        os.makedirs("./json",exist_ok=True)
        with open(f"./json/inscritos.json", 'w') as f:
            json.dump(out, f)

        


    @commands.command(name="close",brief="warnig on use that!!")
    async def close(self, ctx):
        self._allowtouser=False
    
        for index,tutorial in enumerate(self._tutoriais):
            for tutorial in self._tutoriais:
                await self.lista(tutorial)
            await self.show_tutoriais()
            logger.info("Inscri√ß√µes fechadas")
            await logchannel(self.bot,"Inscri√ß√µes fechadas")

    @commands.Cog.listener()
    async def on_ready(self,force_clean=False):
        logger.info("Criando Canais")

        self._guild = await self.bot.fetch_guild(config("DISCORD_GUILD_ID"))

        overwrites = {
        self._guild.default_role: discord.PermissionOverwrite(read_messages=False)}
        organizacao_cat = await get_or_create_channel(
            "TUTORIAIS",
            self._guild,
            type=discord.ChannelType.category,
            overwrites=overwrites,
            position=0,
        )

        if force_clean:
            pass
            # for guilds in self.bot.guilds:
            #     for cat in guilds.categories:
            #         if cat.name == "TUTORIAIS-TESTES":
            #             for c  in cat.channels:
            #                 logger.info(f"Apagando {c.name}")
            #                 await c.delete()

        self.channel = await get_or_create_channel(f"tutorial-info", self._guild, position=0, category=organizacao_cat)
        self.voice=  await get_or_create_channel(f"tutorial-ajuda", self._guild, position=0, category=organizacao_cat,type=discord.ChannelType.voice)

        self._tutoriais = TUTORIAIS

        for index,tutorial in enumerate(self._tutoriais):
            tutorial["file_name"]=f"tutorial_{index}_file.json"
            tutorial_ =await self.load_list(tutorial)
            tutorial_["data_hora"] =  tutorial["data_hora"]
            tutorial = tutorial_
            #await logchannel(self.bot, f"Carregando tutorial-{index}:{tutorial.get('nome')[:20]}")
            channel = await get_or_create_channel(f"tutorial-{index}-chat", self._guild, position=99, category=organizacao_cat)
            voice=  await get_or_create_channel(f"tutorial-{index}-voice", self._guild, position=99, category=organizacao_cat,type=discord.ChannelType.voice)
            tutorial["channel"] = int(channel.id)
            tutorial["voice"] = int(voice.id)
            #await self.clear(tutorial["channel"])
            logger.info(tutorial)
            #msg= await self.lista(tutorial,True)
            #tutorial["inscritos_msg"] = int(msg.id)

            self._tutoriais[index] = tutorial

        #await self.show_tutoriais()
        logger.info("Canais criados com sucesso")
        self.check_messages=True
        await logchannel(self.bot,"Canais criados com sucesso")

    async def show_tutoriais(self):

        await self.clear(self.channel.id)
        msg=""
        msg+="\n:exclamation::exclamation: AQUI EST√ÉO OS TUTORIAIS DA PYTHON BRASIL 2021 :exclamation::exclamation:"
        msg+="\n:exclamation::exclamation: MAIS INFORMA√á√ïES CLICANDO NO LINK DE CADA CANAL :exclamation::exclamation:"
        msg+="\n:exclamation::exclamation: APENAS 1 INSCRI√á√ÉO POR PESSOA NO MESMO HOR√ÅRIO (SER√ÉO VALIDADAS PELO ORG!!) :exclamation::exclamation:"
        msg+="\n:red_circle: INSCRI√á√ïES FECHADAS :red_circle:\n\n\n" if not self._allowtouser else "\n:green_circle: INSCRI√á√ïES ABERTAS :green_circle:\n\n\n"
        msg+=""
        await self.channel.send(msg)

        tutorias_msg=":diamond_shape_with_a_dot_inside: {nome}\n     :writing_hand_tone4: <#{canal}> :calendar: {data}"
        for tutorial  in self._tutoriais:
            canal = self.bot.get_channel(tutorial["channel"])
            nome = tutorial["nome"]
            i= tutorial['inscritos']
            total = tutorial['vagas']
            data = datetime.strptime(tutorial['data_hora'],'%Y-%m-%d %H:%M:%S').strftime('%d/%m/%Y-%H:%M')
            await self.channel.send(tutorias_msg.format(nome=nome,data=data,canal=canal.id,i=i,total=total))


    async def clear(self,channel):
        channel_msg = self.bot.get_channel(channel)
        messages = await channel_msg.history().flatten()
        for msg in messages:
            await msg.delete()

    #@commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        logger.info("Validando mensagem")
        if message.author.bot or message.channel.type == discord.ChannelType.private:
            return
        if not self.check_messages:
            return
        for index,tutorial in enumerate(self._tutoriais):
            channel = self.bot.get_channel(tutorial["channel"])
            # if channel is None:
            #     continue
            if message.channel.id == channel.id:
                logger.info(f"Mensagem dentro de canal {message.channel.name}")
                if message.content.lower() == "entrar":
                    if message.author.id in tutorial["userinscritos"]:
                        logger.info(f"Usu√°rio j√° cadastrado {message.author.name}")
                        #await message.delete()
                        await self.lista(tutorial)
                        return  

                    if not self._allowtouser:
                        #await message.delete()
                        await message.channel.send(":red_circle: INSCRI√á√ïES FECHADAS :red_circle:")
                        return

                    logger.info(f"Cadastrando usu√°rio {message.author.name}")
                    await logchannel(self.bot,f"Cadastrando usu√°rio {message.author.name} em {tutorial['nome']}")
                    tutorial['inscritos']+=1
                    tutorial["userinscritos"].append(message.author.id)
                    logger.info(tutorial)
                    await self.save_list(tutorial)
                    self._tutoriais[index] = tutorial
                    await self.lista(tutorial)

                if message.content.lower() == "sair":
                
                    if message.author.id in tutorial["userinscritos"]:
                        logger.info(f"Removendo usu√°rio {message.author.name}")
                        await logchannel(self.bot,f"Removendo usu√°rio {message.author.name} em {tutorial['nome']}")
                        tutorial['inscritos']-=1
                        tutorial["userinscritos"].remove(message.author.id)
                        await self.save_list(tutorial)
                        self._tutoriais[index] = tutorial
                        await self.lista(tutorial)

                #await message.delete()
                #await self.lista(tutorial)
                #await self.show_tutoriais()

    async def lista(self,tutorial,init=False):
        channel = self.bot.get_channel(tutorial["channel"])

        msg=""
        msg+=":red_circle: INSCRI√á√ïES FECHADAS :red_circle:" if not self._allowtouser else ":green_circle: INSCRI√á√ïES ABERTAS :green_circle:\n:keyboard: DIGITE a palavra 'entrar' para sua inscri√ß√£o ou 'sair' para remover sua inscri√ß√£o :keyboard:"
        msg+= f"\n:diamond_shape_with_a_dot_inside: {MSG.format(channel=tutorial['nome'])}"
        msg+= f"\n:calendar: Dia e Hora: {datetime.strptime(tutorial['data_hora'],'%Y-%m-%d %H:%M:%S').strftime('%d/%m/%Y %H:%M')}"  
        for ministrante in tutorial['ministrantes']:
            msg+=f"\n:teacher_tone5: Ministrante: {ministrante}"

        msg+= f"\n:student_tone5: Lista de Inscritos {tutorial['inscritos']}/{tutorial['vagas']}"
        for item in tutorial['userinscritos']:
            msg+=f"\n<@{item}>"
        
        if tutorial['inscritos'] == tutorial['vagas']:
            msg+="\n:octagonal_sign:  TUTORIAL **LOTADO** :octagonal_sign:"
        else:
            msg+="\n:grey_exclamation: COM VAGAS :grey_exclamation: "

        # if not init: 
        #     message= await channel.fetch_message(tutorial["inscritos_msg"])
        #     await message.edit(content=msg) 
        #     return
        return await channel.send(msg)
